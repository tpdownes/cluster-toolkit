# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
blueprint_name: slurm-a3high

vars:
  sys_net_range: 172.16.0.0/16
  filestore_ip_range: 192.168.0.0/24
  filestore_deletion_protection: true
  disk_size_gb: 200
  base_image:
    project: ubuntu-os-cloud
    family: ubuntu-2204-lts
  zones: []
  instance_image_custom: true
  instance_image:
    project: $(vars.project_id)
    family: slurm-a3high
  slurm_cluster_name: slurm0
  a3_partition_name: a3high
  a3_static_cluster_size: 32
  # a3_reservation_name must be specified; if Google staff have provided you
  # with a reservation name, use it. Otherwise supply user-created reservation.
  a3_reservation_name: a3-reservation-0
  # a3_maintenance_interval should be empty string by default; if Google staff
  # have created a reservation, they will also provide a3_maintenance_interval
  a3_maintenance_interval: ""
  # enable Google Cloud Ops Agent logging and monitoring
  enable_ops_agent: true
  # enable the NVIDIA DCGM daemon and integration into Cloud Ops Agent
  enable_nvidia_dcgm: true
  localssd_mountpoint: /mnt/localssd

deployment_groups:
- group: primary
  modules:
  - id: sysnet
    source: modules/network/vpc
    settings:
      network_name: $(vars.deployment_name)-sysnet
      network_address_range: $(vars.sys_net_range)
      mtu: 8244
      # using explicit var.subnetworks to allow for easier addition
      # of multiple system subnetworks in other regions
      subnetworks:
      - subnet_name: $(vars.deployment_name)-sysnet-subnet
        subnet_region: $(vars.region)
        new_bits: 4
        subnet_private_access: true
        description: primary subnetwork in $(vars.deployment_name)-sysnet
    outputs:
    - network_name
    - subnetwork_name

  - id: homefs
    source: modules/file-system/filestore
    use:
    - sysnet
    settings:
      filestore_tier: HIGH_SCALE_SSD
      size_gb: 10240
      local_mount: /home
      reserved_ip_range: $(vars.filestore_ip_range)
      deletion_protection:
        enabled: $(vars.filestore_deletion_protection)
        reason: Avoid data loss
    outputs:
    - network_storage

- group: build_script
  modules:
  - id: image_build_script
    source: modules/scripts/startup-script
    settings:
      install_ansible: true
      docker:
        enabled: true
        world_writable: true
      configure_ssh_host_patterns:
      - 10.0.0.*
      - 10.1.0.*
      - 10.2.0.*
      - 10.3.0.*
      - $(vars.slurm_cluster_name)*
      runners:
      - type: data
        destination: /var/tmp/slurm_vars.json
        content: |
          {
            "reboot": false,
            "install_cuda": true,
            "install_gcsfuse": true,
            "install_lustre": false,
            "install_ompi": true,
            "monitoring_agent": "cloud-ops",
            "slurm_version": "23.11.8",
            "use_open_drivers": true
          }
      - type: shell
        destination: install_slurm.sh
        content: |
          #!/bin/bash
          set -e -o pipefail
          ansible-galaxy role install googlecloudplatform.google_cloud_ops_agents
          ansible-pull \
              -U https://github.com/GoogleCloudPlatform/slurm-gcp -C 6.8.5 \
              -i localhost, --limit localhost --connection=local \
              -e @/var/tmp/slurm_vars.json \
              ansible/playbook.yml
      # this duplicates the ulimits configuration of the HPC VM Image
      - type: data
        destination: /etc/security/limits.d/99-unlimited.conf
        content: |
          * - memlock unlimited
          * - nproc unlimited
          * - stack unlimited
          * - nofile 1048576
          * - cpu unlimited
          * - rtprio unlimited
      - type: data
        destination: /etc/systemd/system/slurmd.service.d/file_ulimit.conf
        content: |
          [Service]
          LimitNOFILE=infinity
      - type: data
        destination: /etc/systemd/system/delay-a3.service
        content: |
          [Unit]
          Description=Delay A3 boot until all network interfaces are routable
          After=network-online.target
          Wants=network-online.target
          Before=google-startup-scripts.service

          [Service]
          ExecCondition=/bin/bash -c '/usr/bin/curl -s -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/machine-type | grep -q "/a3-highgpu-8g$"'
          ExecStart=/usr/lib/systemd/systemd-networkd-wait-online -i enp6s0 -i enp12s0 -i enp134s0 -i enp140s0 -o routable --timeout=120
          ExecStartPost=/bin/sleep 10

          [Install]
          WantedBy=multi-user.target
      - type: shell
        destination: enable_delay_a3.sh
        content: |
          #!/bin/bash
          set -e -o pipefail
          # workaround b/309016676 (systemd-resolved restarts 4 times causing DNS
          # resolution failures during google-startup-scripts.service)
          systemctl daemon-reload
          systemctl enable delay-a3.service
      - type: data
        destination: /etc/enroot/enroot.conf
        content: |
          ENROOT_RUNTIME_PATH    /mnt/localssd/${UID}/enroot/runtime
          ENROOT_CACHE_PATH      /mnt/localssd/${UID}/enroot/cache
          ENROOT_DATA_PATH       /mnt/localssd/${UID}/enroot/data
          ENROOT_TEMP_PATH       /mnt/localssd/${UID}/enroot
      - type: ansible-local
        destination: configure_gpu_monitoring.yml
        content: |
          ---
          - name: Install NVIDIA DCGM and Configure Ops Agent
            hosts: all
            become: true
            vars:
              distribution: "{{ ansible_distribution | lower }}{{ ansible_distribution_version | replace('.','') }}"
              package_url: https://developer.download.nvidia.com/compute/cuda/repos/{{ distribution }}/x86_64/cuda-keyring_1.1-1_all.deb
              package_filename: /tmp/{{ package_url | basename }}
              enable_ops_agent: true
              enable_nvidia_dcgm: false
            tasks:
            - name: Download NVIDIA repository package
              ansible.builtin.get_url:
                url: "{{ package_url }}"
                dest: "{{ package_filename }}"
            - name: Install NVIDIA repository package
              ansible.builtin.apt:
                deb: "{{ package_filename }}"
                state: present
            - name: Install NVIDIA DCGM
              ansible.builtin.apt:
                name:
                - datacenter-gpu-manager
                - libnvidia-nscq-550
                update_cache: true
            post_tasks:
            - name: Enable Google Cloud Ops Agent
              ansible.builtin.service:
                name: google-cloud-ops-agent.service
                state: "{{ 'started' if enable_ops_agent else 'stopped' }}"
                enabled: "{{ enable_ops_agent }}"
            - name: Disable NVIDIA DCGM by default (enable during boot on GPU nodes)
              ansible.builtin.service:
                name: nvidia-dcgm.service
                state: stopped
                enabled: false
      - type: shell
        destination: install_mdadm.sh
        content: |
          #!/bin/bash
          # this script ensures that the mdadm package is already present when
          # compute nodes boot and use MDADM to RAID local SSD disks
          apt-get update
          apt-get install mdadm --no-install-recommends --assume-yes
      - type: shell
        destination: remove_snap_gcloud.sh
        content: |
          #!/bin/bash
          # THIS RUNNER MUST BE THE LAST RUNNER BECAUSE IT WILL BREAK GSUTIL IN
          # PARENT SCRIPT OF STARTUP-SCRIPT MODULE
          set -e -o pipefail
          # Remove original DLVM gcloud, lxds install due to conflict with snapd and NFS
          snap remove google-cloud-cli lxd
          # Install key and google-cloud-cli from apt repo
          GCLOUD_APT_SOURCE="/etc/apt/sources.list.d/google-cloud-sdk.list"
          if [ ! -f "${GCLOUD_APT_SOURCE}" ]; then
              # indentation matters in EOT below; do not blindly edit!
              cat <<EOT > "${GCLOUD_APT_SOURCE}"
          deb [signed-by=/usr/share/keyrings/cloud.google.asc] https://packages.cloud.google.com/apt cloud-sdk main
          EOT
          fi
          curl -o /usr/share/keyrings/cloud.google.asc https://packages.cloud.google.com/apt/doc/apt-key.gpg
          apt-get update
          apt-get install --assume-yes google-cloud-cli
          # Clean up the bash executable hash for subsequent steps using gsutil
          hash -r

- group: slurm-build
  modules:
  - id: slurm-image
    source: modules/packer/custom-image
    kind: packer
    use:
    - image_build_script
    - sysnet
    settings:
      # building this image does not require a GPU-enabled VM but must *not* be
      # run on a N-series VM otherwise, the "open" drivers will not install
      machine_type: c2d-standard-32
      source_image_project_id: [$(vars.base_image.project)]
      source_image_family: $(vars.base_image.family)
      image_family: $(vars.instance_image.family)
      disk_size: $(vars.disk_size_gb)

- group: cluster
  modules:
  - id: gpunets
    source: modules/network/multivpc
    settings:
      global_ip_address_range: 10.0.0.0/9
      network_name_prefix: $(vars.deployment_name)-gpunet
      network_count: 4
      subnetwork_cidr_suffix: 20

  - id: compute_sa
    source: community/modules/project/service-account
    settings:
      name: compute
      project_roles:
      - logging.logWriter
      - monitoring.metricWriter
      - storage.objectAdmin

  - id: debug_nodeset
    source: community/modules/compute/schedmd-slurm-gcp-v6-nodeset
    use:
    - sysnet
    - compute_sa
    settings:
      node_count_static: 0
      node_count_dynamic_max: 4
      machine_type: n2-standard-2
      enable_placement: false

  - id: debug_partition
    source: community/modules/compute/schedmd-slurm-gcp-v6-partition
    use:
    - debug_nodeset
    settings:
      partition_name: debug
      exclusive: false

  - id: a3_startup
    source: modules/scripts/startup-script
    settings:
      # When shutting down a VM with local SSD disks, we strongly recommend the
      # automatic migration of data following these instructions:
      # https://cloud.google.com/compute/docs/disks/local-ssd#stop_instance
      # Failure to do will result in VMs that lose data and do not automatically
      # mount local SSD filesystems
      local_ssd_filesystem:
        mountpoint: $(vars.localssd_mountpoint)
        permissions: "1777" # must quote numeric filesystem permissions!
      # Docker was successfully installed in the image, this configures it
      # to use the A3-specific local SSD volumes to store container images
      docker:
        enabled: true
        world_writable: true
        daemon_config: |
          {
            "data-root": "$(vars.localssd_mountpoint)/docker"
          }
      runners:
      - type: ansible-local
        destination: enable_nvidia_dcgm.yml
        content: |
          ---
          - name: Enable NVIDIA DCGM on GPU nodes
            hosts: all
            become: true
            vars:
              enable_ops_agent: $(vars.enable_ops_agent)
              enable_nvidia_dcgm: $(vars.enable_nvidia_dcgm)
            tasks:
            - name: Update Ops Agent configuration
              ansible.builtin.blockinfile:
                path: /etc/google-cloud-ops-agent/config.yaml
                insertafter: EOF
                block: |
                  metrics:
                    receivers:
                      dcgm:
                        type: dcgm
                    service:
                      pipelines:
                        dcgm:
                          receivers:
                            - dcgm
              notify:
              - Restart Google Cloud Ops Agent
            handlers:
            - name: Restart Google Cloud Ops Agent
              ansible.builtin.service:
                name: google-cloud-ops-agent.service
                state: "{{ 'restarted' if enable_ops_agent else 'stopped' }}"
                enabled: "{{ enable_ops_agent }}"
            post_tasks:
            - name: Enable Google Cloud Ops Agent
              ansible.builtin.service:
                name: google-cloud-ops-agent.service
                state: "{{ 'started' if enable_ops_agent else 'stopped' }}"
                enabled: "{{ enable_ops_agent }}"
            - name: Enable NVIDIA DCGM
              ansible.builtin.service:
                name: nvidia-dcgm.service
                state: "{{ 'started' if enable_nvidia_dcgm else 'stopped' }}"
                enabled: "{{ enable_nvidia_dcgm }}"

  - id: a3_nodeset
    source: community/modules/compute/schedmd-slurm-gcp-v6-nodeset
    use:
    - sysnet
    - gpunets
    - compute_sa
    - a3_startup
    settings:
      reservation_name: $(vars.a3_reservation_name)
      maintenance_interval: $(vars.a3_maintenance_interval)
      enable_placement: false
      node_count_static: $(vars.a3_static_cluster_size)
      node_count_dynamic_max: 0
      disk_type: pd-ssd
      machine_type: a3-highgpu-8g
      enable_public_ips: false
      enable_smt: true
      node_conf:
        CoresPerSocket: 52
        ThreadsPerCore: 2
      on_host_maintenance: TERMINATE
      bandwidth_tier: gvnic_enabled

  - id: a3_partition
    source: community/modules/compute/schedmd-slurm-gcp-v6-partition
    use:
    - a3_nodeset
    settings:
      partition_name: $(vars.a3_partition_name)
      exclusive: false
      is_default: true
      partition_conf:
        OverSubscribe: EXCLUSIVE

  - id: controller_startup
    source: modules/scripts/startup-script
    settings:
      runners:
      - type: shell
        destination: stage_scripts.sh
        content: |
          #!/bin/bash
          curl -s --create-dirs -o /opt/apps/adm/slurm/scripts/receive-data-path-manager \
              https://raw.githubusercontent.com/GoogleCloudPlatform/slurm-gcp/master/tools/prologs-epilogs/receive-data-path-manager
          chmod 0755 /opt/apps/adm/slurm/scripts/receive-data-path-manager
          mkdir -p /opt/apps/adm/slurm/partition-$(vars.a3_partition_name)-prolog_slurmd.d
          mkdir -p /opt/apps/adm/slurm/partition-$(vars.a3_partition_name)-epilog_slurmd.d
          ln -s /opt/apps/adm/slurm/scripts/receive-data-path-manager /opt/apps/adm/slurm/partition-$(vars.a3_partition_name)-prolog_slurmd.d/start-rxdm.prolog_slurmd
          ln -s /opt/apps/adm/slurm/scripts/receive-data-path-manager /opt/apps/adm/slurm/partition-$(vars.a3_partition_name)-epilog_slurmd.d/stop-rxdm.epilog_slurmd
      - type: shell
        destination: reset_enroot.sh
        content: |
          #!/bin/bash
          # reset enroot to defaults of files under /home and running under /run
          # allows basic enroot testing on login/controller nodes (reduced I/O)
          rm -f /etc/enroot/enroot.conf

  - id: slurm_login
    source: community/modules/scheduler/schedmd-slurm-gcp-v6-login
    use: [sysnet]
    settings:
      name_prefix: login
      disk_type: pd-balanced
      machine_type: c2-standard-4
      enable_login_public_ips: true

  - id: slurm_controller
    source: community/modules/scheduler/schedmd-slurm-gcp-v6-controller
    use:
    - sysnet
    - a3_partition
    - debug_partition
    - slurm_login
    - homefs
    settings:
      cloud_parameters:
        resume_rate: 0
        resume_timeout: 900
        suspend_rate: 0
        suspend_timeout: 600
        no_comma_params: false
        tree_width: $(vars.a3_static_cluster_size)
      machine_type: c2-standard-8
      disk_type: pd-balanced
      slurm_conf_tpl: modules/embedded/community/modules/scheduler/schedmd-slurm-gcp-v6-controller/etc/long-prolog-slurm.conf.tpl
      enable_controller_public_ips: true
      enable_external_prolog_epilog: true
      controller_startup_script: $(controller_startup.startup_script)
      login_startup_script: |
        #!/bin/bash
        # reset enroot to defaults of files under /home and running under /run
        # allows basic enroot testing on login node (reduced I/O)
        rm -f /etc/enroot/enroot.conf
